@startuml
'https://plantuml.com/class-diagram


title OO Unit1 UML
Factor <|-- Number
Factor <|-- PowFunc
Factor <|-- TriFunc
Factor <|-- CustomFunc
CustomFunc .. FuncAnalyzer
Factor <|-- Derivatives
Derivatives .. DerivativesAnalyzer
Factor <|-- Expr
Term <|-- Factor : addFactor()
Expr <|-- Term : addTerm()
Poly <|.. Factor : toPoly()
Mono -^ Poly

interface Factor {
    +Poly toPoly()
}

class Term {
    *int sign = 1
    *ArrayList<Factor> factors
    +void addFactor(Factor factor)
    +Poly toPoly()
}
class Number {
    *BigInteger num
    +Poly toPoly()
}

class PowFunc {
    *String var
    *int index = 1
    +Poly toPoly()
}

class Expr {
    *ArrayList<Term> terms
    *int index = 1
    +void addTerm(Term term)
    +Poly toPoly()
}

class TriFunc {
    *int type //sin: 1; cos: -1
    *Factor factor
    *int index = 1
    +Poly toPoly()
}

class CustomFunc {
    *String name
    *ArrayList<Factor> realParas
    +Poly toPoly()
}

class FuncAnalyzer {
    *static HashMap<String, String> funcMap
    *static HashMap<String, ArrayList<String>> paraMap
    +static void addFunc(input)
    +static String callFunc(funcName, realParas)
    +static String parseDefine(define)
}

class Derivatives {
    *String var
    *Poly polyFactor
    +Poly toPoly()
}

class DerivativesAnalyzer {
    +static Poly derivation(mono, flag)
    +static Poly powFuncDerivation(mono, flag)
    +static Poly sinDerivation(mono, target, flag)
    +static Poly cosDerivation(mono, target, flag)
}

class Poly {
    *ArrayList<Mono> monomials
    +Poly addPoly(Poly other)
    +Poly mulPoly(Poly other)
    +Poly powPoly(int index)
    +Poly toNegative()
    +String toString()
    +equals(Poly other)
    +Poly clone()
}

class Mono {
    *BigInteger num
    *int indexX
    *int indexY
    *int indexY
    *int indexZ
    *HashMap<Poly, Integer> sin
    *HashMap<Poly, Integer> cos
    +void reset()
    +String toString()
    +Poly toPoly()
    +Mono clone()
}

class Merge {
    +static Poly merge(poly)
    +static boolean sinHaveInverseFactor(mono1, mono2)
    +static boolean sameSet(map1,map2)
    +isSumOfSquare(mono1, mono2)
    +static boolean haveSameTriFunc(mono1, mono2)
    +static boolean sameMap(map1, map2)
    +static boolean haveSameVar(mono1, mono2)
    +static int getIndex(map, key)
    +static boolean hasKey(map, key)
}

class Lexer {
    *String input
    *int pos = 0
    *String curToken
    *static String tokens
    +String getNum()
    +void next()
    +String now()
}

class Parser {
    Lexer lexer
    Expr parseExpr()
    Term parseTerm(int flag)
    Factor parseFactor()
}
@enduml