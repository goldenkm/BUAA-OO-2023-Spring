{
  "1": "@ ensures size == (\\sum = int i; 1 < i && i <= \\old(size) && \\old(elements[i].isReferenced()); 1);",
  "2": "elements[++newSize] = obj;",
  "3": "Object[] elements = getElementData();\n        Arrays.sort(elements, 1, getSize());\n        return (MyObject) elements[1];",
  "4-1": "@ assignable heap",
  "4-2": "@ requires \\old(heap.getSize()) + count < DEFAULT_CAPACITY;",
  "4-3": "@ ensures size < DEFAULT_CAPACITY;",
  "4-4": "@ ensures (\\forall int i; 1 <= i && i <= \\old(size);\n      @          (\\exists int j; 1 <= j && j <= size;\n      @          \\old(heap.getElementData[i]).equals(heap.getElementData[j]);",
  "4-5": "@ requires \\old(heap.getSize()) + count >= DEFAULT_CAPACITY;",
  "4-6": "@ ensures heap.getSize() >= DEFAULT_CAPACITY",
  "4-7": "@ ensures (\\forall int i; 1 <= i && i <= \\old(size);\n      @          \\old(heap.getElementData[i].isReferenced()) ==>\n      @           (\\exists int j; 1 <= j && j <= size; heap.getElementData[j].equals(\\old(heap.getElementData[i])));",
  "4-8": "@ ensures (\\forall int i; 1 <= i && i <= \\old(size);\n      @          !(\\old(heap.getElementData[i].isReferenced())) ==>\n      @           (\\forall int j; 1 <= j && j <= size;\n      @           !heap.getElementData[j].equals(\\old(heap.getElementData[i]))));"
}